<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Digi - API Versioning" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1480535084000</longProp>
        <longProp name="ThreadGroup.end_time">1480535084000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - TH" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="serverName" elementType="Argument">
              <stringProp name="Argument.name">serverName</stringProp>
              <stringProp name="Argument.value">test.timhortonstapp.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="adminName" elementType="Argument">
              <stringProp name="Argument.name">adminName</stringProp>
              <stringProp name="Argument.value">ats_user02</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="adminPassword" elementType="Argument">
              <stringProp name="Argument.name">adminPassword</stringProp>
              <stringProp name="Argument.value">frame1234!</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value">password1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tenant" elementType="Argument">
              <stringProp name="Argument.name">tenant</stringProp>
              <stringProp name="Argument.value">th</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="answerDeviation" elementType="Argument">
              <stringProp name="Argument.name">answerDeviation</stringProp>
              <stringProp name="Argument.value">2000</stringProp>
              <stringProp name="Argument.desc">Gaussian distributed value is multiplied by this value</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="delayDeviation" elementType="Argument">
              <stringProp name="Argument.name">delayDeviation</stringProp>
              <stringProp name="Argument.value">2000</stringProp>
              <stringProp name="Argument.desc">Gaussian distributed value is multiplied by this value</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="delayConstantOffset" elementType="Argument">
              <stringProp name="Argument.name">delayConstantOffset</stringProp>
              <stringProp name="Argument.value">2000</stringProp>
              <stringProp name="Argument.desc">Gaussian random value is added to or subtracted from this constant offset</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lang" elementType="Argument">
              <stringProp name="Argument.name">lang</stringProp>
              <stringProp name="Argument.value">en-ca</stringProp>
              <stringProp name="Argument.desc">supported language</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - Global" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="delayDeviation" elementType="Argument">
              <stringProp name="Argument.name">delayDeviation</stringProp>
              <stringProp name="Argument.value">3000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Gaussian distributed value is multiplied by this value</stringProp>
            </elementProp>
            <elementProp name="loopCounter" elementType="Argument">
              <stringProp name="Argument.name">loopCounter</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Counter to determine loop</stringProp>
            </elementProp>
            <elementProp name="idleTime" elementType="Argument">
              <stringProp name="Argument.name">idleTime</stringProp>
              <stringProp name="Argument.value">210000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="version" elementType="Argument">
              <stringProp name="Argument.name">version</stringProp>
              <stringProp name="Argument.value">3.9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="todayDate" elementType="Argument">
              <stringProp name="Argument.name">todayDate</stringProp>
              <stringProp name="Argument.value">${__time(yyyyMMdd)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="yesterdayDate" elementType="Argument">
              <stringProp name="Argument.name">yesterdayDate</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyyMMdd,,P-1D,,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tomorrowDate" elementType="Argument">
              <stringProp name="Argument.name">tomorrowDate</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyyMMdd,,P+1D,,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dayOfMonth" elementType="Argument">
              <stringProp name="Argument.name">dayOfMonth</stringProp>
              <stringProp name="Argument.value">${__javaScript(java.time.LocalDateTime.now(java.time.ZoneOffset.UTC).getDayOfMonth())}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="monthValue" elementType="Argument">
              <stringProp name="Argument.name">monthValue</stringProp>
              <stringProp name="Argument.value">${__javaScript(java.time.LocalDateTime.now(java.time.ZoneOffset.UTC).getMonth().getValue(),monthValue)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="startDate" elementType="Argument">
              <stringProp name="Argument.name">startDate</stringProp>
              <stringProp name="Argument.value">${__javaScript((java.time.LocalDateTime.now().toEpochSecond(java.time.ZoneOffset.UTC)*1000-java.time.LocalTime.now().getHour()*3600).toString())}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="endDate" elementType="Argument">
              <stringProp name="Argument.name">endDate</stringProp>
              <stringProp name="Argument.value">${__javaScript((java.time.LocalDateTime.now().toEpochSecond(java.time.ZoneOffset.UTC)*1000-java.time.LocalTime.now().getHour()*3600000 + 82800000).toString())}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="completionTime" elementType="Argument">
              <stringProp name="Argument.name">completionTime</stringProp>
              <stringProp name="Argument.value">${__javaScript((java.time.LocalDateTime.now().toEpochSecond(java.time.ZoneOffset.UTC)*1000).toString())}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="currentDateLong" elementType="Argument">
              <stringProp name="Argument.name">currentDateLong</stringProp>
              <stringProp name="Argument.value">${__time()}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="standardDelay" elementType="Argument">
              <stringProp name="Argument.name">standardDelay</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="maxResults" elementType="Argument">
              <stringProp name="Argument.name">maxResults</stringProp>
              <stringProp name="Argument.value">99999</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="offSetTimeInMin" elementType="Argument">
              <stringProp name="Argument.name">offSetTimeInMin</stringProp>
              <stringProp name="Argument.value">300</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list"/>
          <boolProp name="AuthManager.clearEachIteration">true</boolProp>
        </AuthManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">false</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" #194939 Digi - API Versioning" enabled="true">
          <stringProp name="TestPlan.comments">Verify the following end points are returning 406 while whe using v1 Digi Endpoints:
 - Using v1 endpoint of GET/service/temperaturelog/{logId}/entry results in HTTP 406 error
 - Using v1 endpoint of DELETE /service/temperaturelog/{logId}/entry/{entryId} results in HTTP 406 error ONLY FOR RECEIVING LOGS
 - Using v1 endpoint of PUT /service/temperaturelog/{logId}/entry results in HTTP 406 error
 - Using v1 endpoint of GET /service/temperaturelog/{logId} results in HTTP 406 error
 - Using v1 endpoint of PUT /service/temperaturelog/{logId} results in HTTP 406 error
 - Using v1 endpoint of PUT /service/temperaturelog/{logId}/savecomplete results in HTTP 406 error
 - Using v1 endpoint of PUT /service/temperaturelog/{logId}/complete results in HTTP 406 error
Prerequisites:
Enable RS on at least one location and use users from that location to test response of these endpoints</stringProp>
        </GenericController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v1" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en,en;q=0.1</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${serverName}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/vnd.fw-v1+json; charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
          </HeaderManager>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Login" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User: ${adminName}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="username" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${adminName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">username</stringProp>
                  </elementProp>
                  <elementProp name="password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${adminPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">password</stringProp>
                  </elementProp>
                  <elementProp name="_l" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${lang}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_l</stringProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ui.ontrack.frameworks.ca</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                  </elementProp>
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">password</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">read</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/auth/oauth/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">106</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${serverName}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${serverName}/login/</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Token" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">accessToken</stringProp>
                <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
                <intProp name="OnError.action">5</intProp>
              </ResultAction>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User: ${adminName} impersonates 0535SStafford" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="username" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${adminName} + [0535SStafford]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">username</stringProp>
                  </elementProp>
                  <elementProp name="password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${adminPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">password</stringProp>
                  </elementProp>
                  <elementProp name="_l" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${lang}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_l</stringProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ui.ontrack.frameworks.ca</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                  </elementProp>
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">password</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">read</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/auth/oauth/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">106</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${serverName}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${serverName}/login/</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Token" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">accessToken</stringProp>
                <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
                <intProp name="OnError.action">5</intProp>
              </ResultAction>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Read Me" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="_l" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${lang}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_l</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/svc/service/user/me</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">service/readMe</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get userId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">userId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.*?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get homeLocationCd" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">homeLocationCd</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.._homeLocationCd</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get homeLocation" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">homeLocation</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..homeLocation</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get DAG" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">dags</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..dags[0]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Role" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">role</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..role</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Persona" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">persona</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..homePageView</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Language (LMS)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">lmsLang</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..lmsLanguageCd</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">false</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="406 Endpoints" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="1. Get Log Entry" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01. Get Location Routine (ONLY v1)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="_d" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${dags}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_d</stringProp>
                    </elementProp>
                    <elementProp name="_l" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${lang}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_l</stringProp>
                    </elementProp>
                    <elementProp name="_u" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${userId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_u</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/svc/service/routine/${homeLocation}/${todayDate}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en,en;q=0.1</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${serverName}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                </HeaderManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v1" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en,en;q=0.1</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${serverName}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/vnd.fw-v1+json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                </HeaderManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - Local" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="nowTime" elementType="Argument">
                      <stringProp name="Argument.name">nowTime</stringProp>
                      <stringProp name="Argument.value">${__time()}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </Arguments>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get routineId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">routineId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="TestPlan.comments">get routine ID which will be mainly used when openning All Log types</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get taskIdNotStarted" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">taskIdNotStarted</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos; &amp;&amp; @.actionStatus==&apos;NOT_STARTED&apos; &amp;&amp; @.dueDateTime &gt; ${nowTime} &amp;&amp; @.scheduledDateTime &lt; ${nowTime})].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="TestPlan.comments">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos;)].id</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get taskIdInProgress" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">taskIdInProgress</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos; &amp;&amp; @.actionStatus==&apos;IN_PROGRESS&apos; &amp;&amp; @.dueDateTime &gt; ${nowTime} &amp;&amp; @.scheduledDateTime &lt; ${nowTime})].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="TestPlan.comments">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos;)].id</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get taskId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">taskId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos; &amp;&amp; @.dueDateTime &gt; ${nowTime} &amp;&amp; @.scheduledDateTime &lt; ${nowTime} )].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">false</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ${taskId} " enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${taskId}&quot; != &quot;&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02. Get Templerature Log ID v1 (will fail for RS logs)" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_d" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${dags}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_d</stringProp>
                      </elementProp>
                      <elementProp name="_l" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${lang}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_l</stringProp>
                      </elementProp>
                      <elementProp name="_u" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${userId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_u</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/svc/service/routine/${homeLocation}/${todayDate}/task/${taskId}/action</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v1" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en,en;q=0.1</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Host</stringProp>
                        <stringProp name="Header.value">${serverName}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/vnd.fw-v1+json; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                      </elementProp>
                    </collectionProp>
                    <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get logId" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">logId</stringProp>
                    <stringProp name="RegexExtractor.regex">Location: .*?([0-9]+).*?</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02. Get Templerature Log ID v2" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_d" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${dags}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_d</stringProp>
                      </elementProp>
                      <elementProp name="_l" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${lang}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_l</stringProp>
                      </elementProp>
                      <elementProp name="_u" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${userId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_u</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/svc/service/routine/${homeLocation}/${todayDate}/task/${taskId}/action</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en,en;q=0.1</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Host</stringProp>
                        <stringProp name="Header.value">${serverName}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                      </elementProp>
                    </collectionProp>
                    <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get logId" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">logId</stringProp>
                    <stringProp name="RegexExtractor.regex">Location: .*?([0-9]+).*?</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If !${logId}" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${logId}&quot; != &quot;&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="406.1 GET /service/temperaturelog/${logId}/entry v1" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="_d" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${dags}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_d</stringProp>
                        </elementProp>
                        <elementProp name="_l" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${lang}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_l</stringProp>
                        </elementProp>
                        <elementProp name="_u" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${userId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_u</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/svc/service/temperaturelog/${logId}/entry</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v1" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en,en;q=0.1</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                        </elementProp>
                        <elementProp name="Host" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/vnd.fw-v1+json; charset=utf-8</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get logEntryId" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">logEntryId</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get logEntryIdSaveComplete" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">logEntryIdSaveComplete</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">2</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get menuItem" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">menuItem</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]menuItem</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get menuItemSaveComplete" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">menuItemSaveComplete</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]menuItem</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">2</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get tray" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">tray</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..tray</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get actionItemCount" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">actionItemCount</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]actionItemCount</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get actionItemCountSaveComplete" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">actionItemCountSaveComplete</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]actionItemCount</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">2</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get temperatureProfile" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">temperatureProfile</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..temperatureProfile</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="406.1 GET /service/temperaturelog/${logId}/entry v2" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="_d" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${dags}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_d</stringProp>
                        </elementProp>
                        <elementProp name="_l" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${lang}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_l</stringProp>
                        </elementProp>
                        <elementProp name="_u" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${userId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_u</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/svc/service/temperaturelog/${logId}/entry</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en,en;q=0.1</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                        </elementProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get logEntryId" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">logEntryId</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get logEntryIdSaveComplete" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">logEntryIdSaveComplete</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">2</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get menuItem" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">menuItem</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]menuItem</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get menuItemSaveComplete" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">menuItemSaveComplete</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]menuItem</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">2</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get tray" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">tray</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..tray</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get actionItemCount" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">actionItemCount</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]actionItemCount</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get actionItemCountSaveComplete" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">actionItemCountSaveComplete</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]actionItemCount</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">2</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get temperatureProfile" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">temperatureProfile</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..temperatureProfile</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2. Delete Log Entry " enabled="true">
              <stringProp name="TestPlan.comments">DELETES ONLY RECIEVING LOG</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01. Get Location Routine (ONLY v1)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="_d" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${dags}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_d</stringProp>
                    </elementProp>
                    <elementProp name="_l" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${lang}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_l</stringProp>
                    </elementProp>
                    <elementProp name="_u" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${userId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_u</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/svc/service/routine/${homeLocation}/${todayDate}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v1" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en,en;q=0.1</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${serverName}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/vnd.fw-v1+json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                </HeaderManager>
                <hashTree/>
                <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - Local" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="nowTime" elementType="Argument">
                      <stringProp name="Argument.name">nowTime</stringProp>
                      <stringProp name="Argument.value">${__time()}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </Arguments>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get routineId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">routineId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="TestPlan.comments">get routine ID which will be mainly used when openning All Log types</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get taskIdNotStarted" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">taskIdNotStarted</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos; &amp;&amp; @.actionStatus==&apos;NOT_STARTED&apos; &amp;&amp; @.dueDateTime &gt; ${nowTime} &amp;&amp; @.scheduledDateTime &lt; ${nowTime})].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="TestPlan.comments">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos;)].id</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get taskIdInProgress" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">taskIdInProgress</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos; &amp;&amp; @.actionStatus==&apos;IN_PROGRESS&apos; &amp;&amp; @.dueDateTime &gt; ${nowTime} &amp;&amp; @.scheduledDateTime &lt; ${nowTime})].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="TestPlan.comments">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos;)].id</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get taskId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">taskId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..tasks[*][?(@.action.cd==&apos;REC&apos;)].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">false</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ${taskId} " enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${taskId}&quot; != &quot;&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02. Get Templerature Log ID v2" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_d" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${dags}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_d</stringProp>
                      </elementProp>
                      <elementProp name="_l" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${lang}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_l</stringProp>
                      </elementProp>
                      <elementProp name="_u" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${userId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_u</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/svc/service/routine/${homeLocation}/${todayDate}/task/${taskId}/action</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en,en;q=0.1</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Host</stringProp>
                        <stringProp name="Header.value">${serverName}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                      </elementProp>
                    </collectionProp>
                    <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                  </HeaderManager>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v1" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en,en;q=0.1</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Host</stringProp>
                        <stringProp name="Header.value">${serverName}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/vnd.fw-v1+json; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                      </elementProp>
                    </collectionProp>
                    <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get logId" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">logId</stringProp>
                    <stringProp name="RegexExtractor.regex">Location: .*?([0-9]+).*?</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                    <boolProp name="displayJMeterProperties">false</boolProp>
                    <boolProp name="displayJMeterVariables">true</boolProp>
                    <boolProp name="displaySamplerProperties">true</boolProp>
                    <boolProp name="displaySystemProperties">false</boolProp>
                  </DebugPostProcessor>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If !${logId}" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${logId}&quot; != &quot;&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="406.1 GET /service/temperaturelog/${logId}/entry v2" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="_d" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${dags}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_d</stringProp>
                        </elementProp>
                        <elementProp name="_l" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${lang}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_l</stringProp>
                        </elementProp>
                        <elementProp name="_u" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${userId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_u</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/svc/service/temperaturelog/${logId}/entry</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="false">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en,en;q=0.1</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                        </elementProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                    </HeaderManager>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v1" enabled="false">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en,en;q=0.1</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                        </elementProp>
                        <elementProp name="Host" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/vnd.fw-v1+json; charset=utf-8</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get logEntryId" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">logEntryId</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                      <boolProp name="displayJMeterProperties">false</boolProp>
                      <boolProp name="displayJMeterVariables">true</boolProp>
                      <boolProp name="displaySamplerProperties">true</boolProp>
                      <boolProp name="displaySystemProperties">false</boolProp>
                    </DebugPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If !${logEntryId}" enabled="true">
                    <stringProp name="TestPlan.comments">If no entries were returned no need to save</stringProp>
                    <stringProp name="IfController.condition">${__jexl3(&quot;${logEntryId}&quot; != &quot;&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="406.2. DELETE Rec Log Entry /service/temperaturelog/${logId}/entry/${logEntryId} v1" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="_d" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${dags}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">_d</stringProp>
                          </elementProp>
                          <elementProp name="_l" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${lang}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">_l</stringProp>
                          </elementProp>
                          <elementProp name="_u" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${userId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">_u</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/svc/service/temperaturelog/${logId}/entry/${logEntryId}</stringProp>
                      <stringProp name="HTTPSampler.method">DELETE</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">Java</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="TestPlan.comments">
</stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v1" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en,en;q=0.1</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/vnd.fw-v1+json; charset=utf-8</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                          </elementProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="406.2. DELETE Rec Log Entry /service/temperaturelog/${logId}/entry/${logEntryId} v2" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="_d" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${dags}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">_d</stringProp>
                          </elementProp>
                          <elementProp name="_l" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${lang}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">_l</stringProp>
                          </elementProp>
                          <elementProp name="_u" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${userId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">_u</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/svc/service/temperaturelog/${logId}/entry/${logEntryId}</stringProp>
                      <stringProp name="HTTPSampler.method">DELETE</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">Java</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="TestPlan.comments">
</stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en,en;q=0.1</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                          </elementProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3. Update Entry - &apos;entry&apos;" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01. Get Location Routine (ONLY v1)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="_d" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${dags}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_d</stringProp>
                    </elementProp>
                    <elementProp name="_l" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${lang}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_l</stringProp>
                    </elementProp>
                    <elementProp name="_u" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${userId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_u</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/svc/service/routine/${homeLocation}/${todayDate}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v1" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en,en;q=0.1</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${serverName}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/vnd.fw-v1+json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                </HeaderManager>
                <hashTree/>
                <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - Local" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="nowTime" elementType="Argument">
                      <stringProp name="Argument.name">nowTime</stringProp>
                      <stringProp name="Argument.value">${__time()}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </Arguments>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get routineId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">routineId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="TestPlan.comments">get routine ID which will be mainly used when openning All Log types</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get taskIdNotStarted" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">taskIdNotStarted</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos; &amp;&amp; @.actionStatus==&apos;NOT_STARTED&apos; &amp;&amp; @.dueDateTime &gt; ${nowTime} &amp;&amp; @.scheduledDateTime &lt; ${nowTime})].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="TestPlan.comments">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos;)].id</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get taskIdInProgress" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">taskIdInProgress</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos; &amp;&amp; @.actionStatus==&apos;IN_PROGRESS&apos; &amp;&amp; @.dueDateTime &gt; ${nowTime} &amp;&amp; @.scheduledDateTime &lt; ${nowTime})].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="TestPlan.comments">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos;)].id</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get taskId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">taskId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos; &amp;&amp; @.dueDateTime &gt; ${nowTime} &amp;&amp; @.scheduledDateTime &lt; ${nowTime} )].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">false</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ${taskId} " enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${taskId}&quot; != &quot;&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02. Get Templerature Log ID v2" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_d" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${dags}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_d</stringProp>
                      </elementProp>
                      <elementProp name="_l" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${lang}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_l</stringProp>
                      </elementProp>
                      <elementProp name="_u" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${userId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_u</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/svc/service/routine/${homeLocation}/${todayDate}/task/${taskId}/action</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en,en;q=0.1</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Host</stringProp>
                        <stringProp name="Header.value">${serverName}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                      </elementProp>
                    </collectionProp>
                    <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get logId" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">logId</stringProp>
                    <stringProp name="RegexExtractor.regex">Location: .*?([0-9]+).*?</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If !${logId}" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${logId}&quot; != &quot;&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="406.4 GET /service/temperaturelog/${logId}/entry v2" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="_d" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${dags}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_d</stringProp>
                        </elementProp>
                        <elementProp name="_l" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${lang}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_l</stringProp>
                        </elementProp>
                        <elementProp name="_u" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${userId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_u</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/svc/service/temperaturelog/${logId}/entry</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en,en;q=0.1</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                        </elementProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get logEntryId" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">logEntryId</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get logEntryIdSaveComplete" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">logEntryIdSaveComplete</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get menuItem" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">menuItem</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]menuItem</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get menuItemSaveComplete" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">menuItemSaveComplete</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]menuItem</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get tray" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">tray</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..tray</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get actionItemCount" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">actionItemCount</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]actionItemCount</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get actionItemCountSaveComplete" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">actionItemCountSaveComplete</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]actionItemCount</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get temperatureProfile" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">temperatureProfile</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..temperatureProfile</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                      <boolProp name="displayJMeterProperties">false</boolProp>
                      <boolProp name="displayJMeterVariables">true</boolProp>
                      <boolProp name="displaySamplerProperties">false</boolProp>
                      <boolProp name="displaySystemProperties">false</boolProp>
                    </DebugPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If !${logEntryId}" enabled="true">
                    <stringProp name="TestPlan.comments">If no entries were returned no need to save</stringProp>
                    <stringProp name="IfController.condition">${__jexl3(&quot;${logEntryId}&quot; != &quot;&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="05. Save - /svc/service/temperaturelog/${logId}/entry v2" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">[&#xd;
	{&#xd;
	&quot;@class&quot;: &quot;frameworks.log.data.MenuItemTemperatureLogEntry&quot;,&#xd;
	&quot;id&quot;: ${logEntryId},&#xd;
	&quot;readings&quot;: [&#xd;
        {&#xd;
          &quot;readingIdx&quot;: 0,&#xd;
          &quot;usrTemperatureScale&quot;: &quot;FAHRENHEIT&quot;,&#xd;
          &quot;usrTemperature&quot;: &quot;99.0&quot;,&#xd;
          &quot;status&quot;: &quot;ON_STANDARD&quot;,&#xd;
          &quot;thermalState&quot;: &quot;OK&quot;&#xd;
        }&#xd;
    ]&#xd;
}&#xd;
]</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/svc/service/temperaturelog/${logId}/entry?_d=${dags}&amp;_l=${lang}&amp;_u=${userId}</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">Java</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="TestPlan.comments">
</stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v1" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en,en;q=0.1</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/vnd.fw-v1+json; charset=utf-8</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                          </elementProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="05. Save - /svc/service/temperaturelog/${logId}/entry v2" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">[&#xd;
	{&#xd;
	&quot;@class&quot;: &quot;frameworks.log.data.MenuItemTemperatureLogEntry&quot;,&#xd;
	&quot;id&quot;: ${logEntryId},&#xd;
	&quot;readings&quot;: [&#xd;
        {&#xd;
          &quot;readingIdx&quot;: 0,&#xd;
          &quot;usrTemperatureScale&quot;: &quot;FAHRENHEIT&quot;,&#xd;
          &quot;usrTemperature&quot;: &quot;99.0&quot;,&#xd;
          &quot;status&quot;: &quot;ON_STANDARD&quot;,&#xd;
          &quot;thermalState&quot;: &quot;OK&quot;&#xd;
        }&#xd;
    ]&#xd;
}&#xd;
]</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/svc/service/temperaturelog/${logId}/entry?_d=${dags}&amp;_l=${lang}&amp;_u=${userId}</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">Java</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="TestPlan.comments">
</stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en,en;q=0.1</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                          </elementProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="4. Get Log" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01. Get Location Routine (ONLY v1)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="_d" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${dags}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_d</stringProp>
                    </elementProp>
                    <elementProp name="_l" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${lang}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_l</stringProp>
                    </elementProp>
                    <elementProp name="_u" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${userId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_u</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/svc/service/routine/${homeLocation}/${todayDate}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - Local" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="nowTime" elementType="Argument">
                      <stringProp name="Argument.name">nowTime</stringProp>
                      <stringProp name="Argument.value">${__time()}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </Arguments>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get routineId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">routineId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="TestPlan.comments">get routine ID which will be mainly used when openning All Log types</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get taskIdNotStarted" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">taskIdNotStarted</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos; &amp;&amp; @.actionStatus==&apos;NOT_STARTED&apos; &amp;&amp; @.dueDateTime &gt; ${nowTime} &amp;&amp; @.scheduledDateTime &lt; ${nowTime})].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="TestPlan.comments">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos;)].id</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get taskIdInProgress" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">taskIdInProgress</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos; &amp;&amp; @.actionStatus==&apos;IN_PROGRESS&apos; &amp;&amp; @.dueDateTime &gt; ${nowTime} &amp;&amp; @.scheduledDateTime &lt; ${nowTime})].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="TestPlan.comments">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos;)].id</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get taskId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">taskId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos; &amp;&amp; @.dueDateTime &gt; ${nowTime} &amp;&amp; @.scheduledDateTime &lt; ${nowTime} )].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">false</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ${taskId} " enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${taskId}&quot; != &quot;&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02. Get Templerature Log ID v2" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_d" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${dags}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_d</stringProp>
                      </elementProp>
                      <elementProp name="_l" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${lang}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_l</stringProp>
                      </elementProp>
                      <elementProp name="_u" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${userId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_u</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/svc/service/routine/${homeLocation}/${todayDate}/task/${taskId}/action</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en,en;q=0.1</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Host</stringProp>
                        <stringProp name="Header.value">${serverName}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                      </elementProp>
                    </collectionProp>
                    <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get logId" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">logId</stringProp>
                    <stringProp name="RegexExtractor.regex">Location: .*?([0-9]+).*?</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If !${logId}" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${logId}&quot; != &quot;&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="406.4 GET /service/temperaturelog/${logId} v1" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="_d" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${dags}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_d</stringProp>
                        </elementProp>
                        <elementProp name="_l" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${lang}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_l</stringProp>
                        </elementProp>
                        <elementProp name="_u" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${userId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_u</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/svc/service/temperaturelog/${logId}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v1" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en,en;q=0.1</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                        </elementProp>
                        <elementProp name="Host" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/vnd.fw-v1+json; charset=utf-8</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get logEntryId" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">logEntryId</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get logEntryIdSaveComplete" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">logEntryIdSaveComplete</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">2</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get menuItem" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">menuItem</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]menuItem</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get menuItemSaveComplete" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">menuItemSaveComplete</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]menuItem</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">2</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get tray" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">tray</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..tray</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get actionItemCount" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">actionItemCount</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]actionItemCount</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get actionItemCountSaveComplete" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">actionItemCountSaveComplete</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]actionItemCount</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">2</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get temperatureProfile" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">temperatureProfile</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..temperatureProfile</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="406.4 GET /service/temperaturelog/${logId} v2" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="_d" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${dags}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_d</stringProp>
                        </elementProp>
                        <elementProp name="_l" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${lang}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_l</stringProp>
                        </elementProp>
                        <elementProp name="_u" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${userId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_u</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/svc/service/temperaturelog/${logId}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en,en;q=0.1</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                        </elementProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get logEntryId" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">logEntryId</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get logEntryIdSaveComplete" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">logEntryIdSaveComplete</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">2</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get menuItem" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">menuItem</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]menuItem</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get menuItemSaveComplete" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">menuItemSaveComplete</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]menuItem</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">2</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get tray" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">tray</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..tray</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get actionItemCount" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">actionItemCount</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]actionItemCount</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get actionItemCountSaveComplete" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">actionItemCountSaveComplete</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]actionItemCount</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">2</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get temperatureProfile" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">temperatureProfile</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..temperatureProfile</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="5. Update Log to INPROGRESS" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01. Get Location Routine (ONLY v1)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="_d" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${dags}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_d</stringProp>
                    </elementProp>
                    <elementProp name="_l" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${lang}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_l</stringProp>
                    </elementProp>
                    <elementProp name="_u" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${userId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_u</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/svc/service/routine/${homeLocation}/${todayDate}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en,en;q=0.1</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${serverName}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                </HeaderManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v1" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en,en;q=0.1</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${serverName}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/vnd.fw-v1+json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                </HeaderManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - Local" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="nowTime" elementType="Argument">
                      <stringProp name="Argument.name">nowTime</stringProp>
                      <stringProp name="Argument.value">${__time()}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </Arguments>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get routineId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">routineId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="TestPlan.comments">get routine ID which will be mainly used when openning All Log types</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get taskIdNotStarted" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">taskIdNotStarted</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos; &amp;&amp; @.actionStatus==&apos;NOT_STARTED&apos; &amp;&amp; @.dueDateTime &gt; ${nowTime} &amp;&amp; @.scheduledDateTime &lt; ${nowTime})].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="TestPlan.comments">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos;)].id</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get taskIdInProgress" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">taskIdInProgress</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos; &amp;&amp; @.actionStatus==&apos;IN_PROGRESS&apos; &amp;&amp; @.dueDateTime &gt; ${nowTime} &amp;&amp; @.scheduledDateTime &lt; ${nowTime})].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="TestPlan.comments">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos;)].id</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get taskId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">taskId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos; &amp;&amp; @.dueDateTime &gt; ${nowTime} &amp;&amp; @.scheduledDateTime &lt; ${nowTime} )].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">false</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If !${taskIdNotStarted}" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${taskIdNotStarted}&quot; != &quot;&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02. Get Templerature Log ID (NOT_STARTED - get Header Response)" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_d" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${dags}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_d</stringProp>
                      </elementProp>
                      <elementProp name="_l" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${lang}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_l</stringProp>
                      </elementProp>
                      <elementProp name="_u" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${userId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_u</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/svc/service/routine/${homeLocation}/${todayDate}/task/${taskIdNotStarted}/action</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get logId" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">logId</stringProp>
                    <stringProp name="RegexExtractor.regex">Location: .*?([0-9]+).*?</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en,en;q=0.1</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Host</stringProp>
                        <stringProp name="Header.value">${serverName}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                      </elementProp>
                    </collectionProp>
                    <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If !${logId}" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${logId}&quot; != &quot;&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="406.6 Not Started - Mark Temperature Log Status INPROGRESS v1" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;status&quot;:&quot;INPROGRESS&quot;&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/svc/service/temperaturelog/${logId}?_d=${dags}&amp;_l=${lang}&amp;_u=${userId}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v1" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en,en;q=0.1</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/vnd.fw-v1+json; charset=utf-8</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                        </elementProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="406.6 Not Started - Mark Temperature Log Status INPROGRESS v2" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;status&quot;:&quot;INPROGRESS&quot;&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/svc/service/temperaturelog/${logId}?_d=${dags}&amp;_l=${lang}&amp;_u=${userId}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en,en;q=0.1</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                        </elementProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="6. Update Entry - Complete" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01. Get Location Routine (NEVER v2)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="_d" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${dags}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_d</stringProp>
                    </elementProp>
                    <elementProp name="_l" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${lang}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_l</stringProp>
                    </elementProp>
                    <elementProp name="_u" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${userId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_u</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/svc/service/routine/${homeLocation}/${todayDate}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - Local" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="nowTime" elementType="Argument">
                      <stringProp name="Argument.name">nowTime</stringProp>
                      <stringProp name="Argument.value">${__time()}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </Arguments>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get routineId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">routineId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="TestPlan.comments">get routine ID which will be mainly used when openning All Log types</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get taskIdNotStarted" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">taskIdNotStarted</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos; &amp;&amp; @.actionStatus==&apos;NOT_STARTED&apos; &amp;&amp; @.dueDateTime &gt; ${nowTime} &amp;&amp; @.scheduledDateTime &lt; ${nowTime})].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="TestPlan.comments">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos;)].id</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get taskIdInProgress" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">taskIdInProgress</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos; &amp;&amp; @.actionStatus==&apos;IN_PROGRESS&apos; &amp;&amp; @.dueDateTime &gt; ${nowTime} &amp;&amp; @.scheduledDateTime &lt; ${nowTime})].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="TestPlan.comments">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos;)].id</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get taskId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">taskId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos; &amp;&amp; @.dueDateTime &gt; ${nowTime} &amp;&amp; @.scheduledDateTime &lt; ${nowTime} )].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">false</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ${taskId} " enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${taskId}&quot; != &quot;&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02. Get Templerature Log ID for taskId: ${taskId} v2 " enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_d" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${dags}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_d</stringProp>
                      </elementProp>
                      <elementProp name="_l" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${lang}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_l</stringProp>
                      </elementProp>
                      <elementProp name="_u" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${userId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_u</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/svc/service/routine/${homeLocation}/${todayDate}/task/${taskId}/action</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en,en;q=0.1</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Host</stringProp>
                        <stringProp name="Header.value">${serverName}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                      </elementProp>
                    </collectionProp>
                    <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get logId" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">logId</stringProp>
                    <stringProp name="RegexExtractor.regex">Location: .*?([0-9]+).*?</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                    <boolProp name="displayJMeterProperties">false</boolProp>
                    <boolProp name="displayJMeterVariables">true</boolProp>
                    <boolProp name="displaySamplerProperties">true</boolProp>
                    <boolProp name="displaySystemProperties">false</boolProp>
                  </DebugPostProcessor>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If !${logId}" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${logId}&quot; != &quot;&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="406.4 GET /service/temperaturelog/${logId}/entry v2" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="_d" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${dags}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_d</stringProp>
                        </elementProp>
                        <elementProp name="_l" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${lang}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_l</stringProp>
                        </elementProp>
                        <elementProp name="_u" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${userId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_u</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/svc/service/temperaturelog/${logId}/entry</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en,en;q=0.1</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                        </elementProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get logEntryId" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">logEntryId</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get tray" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">tray</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..tray</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get temperatureProfile" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">temperatureProfile</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..temperatureProfile</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get menuItem" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">menuItem</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]menuItem</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get menuGroup" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">menuGroup</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..menuGroup</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get locationEquipment" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">locationEquipment</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..locationEquipment</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get actionItemCount" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">actionItemCount</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]actionItemCount</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get randomlySelected" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">randomlySelected</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..randomlySelected</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get strategy" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">strategy</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..strategy</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                      <boolProp name="displayJMeterProperties">false</boolProp>
                      <boolProp name="displayJMeterVariables">true</boolProp>
                      <boolProp name="displaySamplerProperties">false</boolProp>
                      <boolProp name="displaySystemProperties">false</boolProp>
                    </DebugPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If !${logEntryId}" enabled="true">
                    <stringProp name="TestPlan.comments">If no entries were returned no need to save</stringProp>
                    <stringProp name="IfController.condition">${__jexl3(&quot;${logEntryId}&quot; != &quot;&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="406.6. Save Templerature Log Entry &apos;complete&apos; v1" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: ${logId},&#xd;
  &quot;status&quot;: &quot;INPROGRESS&quot;&#xd;
}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/svc/service/temperaturelog/${logId}/complete?_d=${dags}&amp;_l=${lang}&amp;_u=${userId}</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">Java</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="TestPlan.comments">
</stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v1" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en,en;q=0.1</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Host" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/vnd.fw-v1+json; charset=utf-8</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="406.6. Save Templerature Log Entry &apos;complete&apos; v2" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: ${logId},&#xd;
  &quot;status&quot;: &quot;INPROGRESS&quot;&#xd;
}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/svc/service/temperaturelog/${logId}/complete?_d=${dags}&amp;_l=${lang}&amp;_u=${userId}</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">Java</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="TestPlan.comments">
</stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en,en;q=0.1</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Host" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If !${logEntryIdSaveComplete}" enabled="false">
                    <stringProp name="TestPlan.comments">If no entries were returned no need to save</stringProp>
                    <stringProp name="IfController.condition">${__jexl3(&quot;${logEntryIdSaveComplete}&quot; != &quot;&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="406.6. Save Templerature Log Entry &apos;complete&apos; v1" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: ${logId}, &#xd;
  &quot;status&quot;: &quot;INPROGRESS&quot;, &#xd;
  &quot;completedDateTime&quot;: null,&#xd;
  &quot;completedUserId&quot;: null,&#xd;
  &quot;routineTask&quot;: ${taskId},&#xd;
  &quot;entries&quot;: [&#xd;
    {&#xd;
      &quot;@class&quot;: &quot;frameworks.log.data.RSHoldingTemperatureLogEntry&quot;,&#xd;
      &quot;id&quot;: ${logEntryIdSaveComplete},&#xd;
      &quot;readings&quot;: [&#xd;
        {&#xd;
          &quot;readingIdx&quot;: 0,&#xd;
          &quot;usrTemperatureScale&quot;: &quot;CENTIGRADE&quot;,&#xd;
          &quot;usrTemperature&quot;: &quot;66.0&quot;,&#xd;
          &quot;status&quot;: &quot;ON_STANDARD&quot;,&#xd;
		&quot;thermalState&quot;: &quot;OK&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;actionItemCount&quot;:${actionItemCount},&#xd;
      &quot;temperatureProfile&quot;: &quot;${temperatureProfile}&quot;&#xd;
    }]&#xd;
}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/svc/service/temperaturelog/${logId}/complete?_d=${dags}&amp;_l=${lang}&amp;_u=${userId}</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">Java</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v1" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en,en;q=0.1</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Host" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/vnd.fw-v1+json; charset=utf-8</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="406.6. Save Templerature Log Entry &apos;complete&apos; v2" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: ${logId}, &#xd;
  &quot;status&quot;: &quot;INPROGRESS&quot;, &#xd;
  &quot;completedDateTime&quot;: null,&#xd;
  &quot;completedUserId&quot;: null,&#xd;
  &quot;routineTask&quot;: ${taskId},&#xd;
  &quot;entries&quot;: [&#xd;
    {&#xd;
      &quot;@class&quot;: &quot;frameworks.log.data.RSHoldingTemperatureLogEntry&quot;,&#xd;
      &quot;id&quot;: ${logEntryIdSaveComplete},&#xd;
      &quot;readings&quot;: [&#xd;
        {&#xd;
          &quot;readingIdx&quot;: 0,&#xd;
          &quot;usrTemperatureScale&quot;: &quot;CENTIGRADE&quot;,&#xd;
          &quot;usrTemperature&quot;: &quot;66.0&quot;,&#xd;
          &quot;status&quot;: &quot;ON_STANDARD&quot;,&#xd;
		&quot;thermalState&quot;: &quot;OK&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;actionItemCount&quot;:${actionItemCount},&#xd;
      &quot;temperatureProfile&quot;: &quot;${temperatureProfile}&quot;&#xd;
    }]&#xd;
}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/svc/service/temperaturelog/${logId}/complete?_d=${dags}&amp;_l=${lang}&amp;_u=${userId}</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">Java</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en,en;q=0.1</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Host" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="7. Update Entry - SaveComplete" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01. Get Location Routine (ONLY v1)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="_d" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${dags}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_d</stringProp>
                    </elementProp>
                    <elementProp name="_l" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${lang}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_l</stringProp>
                    </elementProp>
                    <elementProp name="_u" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${userId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_u</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/svc/service/routine/${homeLocation}/${todayDate}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en,en;q=0.1</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${serverName}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                </HeaderManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v1" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en,en;q=0.1</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${serverName}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/vnd.fw-v1+json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                </HeaderManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - Local" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="nowTime" elementType="Argument">
                      <stringProp name="Argument.name">nowTime</stringProp>
                      <stringProp name="Argument.value">${__time()}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </Arguments>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get routineId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">routineId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="TestPlan.comments">get routine ID which will be mainly used when openning All Log types</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get taskIdNotStarted" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">taskIdNotStarted</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos; &amp;&amp; @.actionStatus==&apos;NOT_STARTED&apos; &amp;&amp; @.dueDateTime &gt; ${nowTime} &amp;&amp; @.scheduledDateTime &lt; ${nowTime})].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="TestPlan.comments">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos;)].id</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get taskIdInProgress" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">taskIdInProgress</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos; &amp;&amp; @.actionStatus==&apos;IN_PROGRESS&apos; &amp;&amp; @.dueDateTime &gt; ${nowTime} &amp;&amp; @.scheduledDateTime &lt; ${nowTime})].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="TestPlan.comments">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos;)].id</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get taskId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">taskId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..tasks[*][?(@.action.cd==&apos;HOLDING&apos; &amp;&amp; @.dueDateTime &gt; ${nowTime} &amp;&amp; @.scheduledDateTime &lt; ${nowTime} )].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">false</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ${taskId} " enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${taskId}&quot; != &quot;&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02. Get Templerature Log ID v2" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_d" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${dags}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_d</stringProp>
                      </elementProp>
                      <elementProp name="_l" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${lang}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_l</stringProp>
                      </elementProp>
                      <elementProp name="_u" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${userId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">_u</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/svc/service/routine/${homeLocation}/${todayDate}/task/${taskId}/action</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en,en;q=0.1</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Host</stringProp>
                        <stringProp name="Header.value">${serverName}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                      </elementProp>
                    </collectionProp>
                    <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get logId" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">logId</stringProp>
                    <stringProp name="RegexExtractor.regex">Location: .*?([0-9]+).*?</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                    <boolProp name="displayJMeterProperties">false</boolProp>
                    <boolProp name="displayJMeterVariables">true</boolProp>
                    <boolProp name="displaySamplerProperties">true</boolProp>
                    <boolProp name="displaySystemProperties">false</boolProp>
                  </DebugPostProcessor>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If !${logId}" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${logId}&quot; != &quot;&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="406.4 GET /service/temperaturelog/${logId}/entry v2" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="_d" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${dags}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_d</stringProp>
                        </elementProp>
                        <elementProp name="_l" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${lang}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_l</stringProp>
                        </elementProp>
                        <elementProp name="_u" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${userId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_u</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/svc/service/temperaturelog/${logId}/entry</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en,en;q=0.1</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${serverName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                        </elementProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">most of the end points are using v1 with some exceptions</stringProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get logEntryId" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">logEntryId</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get logEntryIdSaveComplete" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">logEntryIdSaveComplete</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get menuItem" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">menuItem</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]menuItem</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get menuItemSaveComplete" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">menuItemSaveComplete</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]menuItem</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get tray" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">tray</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..tray</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get actionItemCount" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">actionItemCount</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]actionItemCount</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get actionItemCountSaveComplete" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">actionItemCountSaveComplete</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]actionItemCount</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get temperatureProfile" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">temperatureProfile</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..temperatureProfile</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                      <boolProp name="displayJMeterProperties">false</boolProp>
                      <boolProp name="displayJMeterVariables">true</boolProp>
                      <boolProp name="displaySamplerProperties">false</boolProp>
                      <boolProp name="displaySystemProperties">false</boolProp>
                    </DebugPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If !${logEntryIdSaveComplete}" enabled="true">
                    <stringProp name="TestPlan.comments">If no entries were returned no need to save</stringProp>
                    <stringProp name="IfController.condition">${__jexl3(&quot;${logEntryIdSaveComplete}&quot; != &quot;&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="406.6. Save Templerature Log Entry &apos;savecomplete&apos; v1" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: ${logId}, &#xd;
  &quot;status&quot;: &quot;INPROGRESS&quot;, &#xd;
  &quot;completedDateTime&quot;: null,&#xd;
  &quot;completedUserId&quot;: null,&#xd;
  &quot;routineTask&quot;: ${taskId},&#xd;
  &quot;entries&quot;: [&#xd;
    {&#xd;
      &quot;@class&quot;: &quot;frameworks.log.data.RSHoldingTemperatureLogEntry&quot;,&#xd;
      &quot;id&quot;: ${logEntryIdS},&#xd;
      &quot;readings&quot;: [&#xd;
        {&#xd;
          &quot;readingIdx&quot;: 0,&#xd;
          &quot;usrTemperatureScale&quot;: &quot;CENTIGRADE&quot;,&#xd;
          &quot;usrTemperature&quot;: &quot;66.0&quot;,&#xd;
          &quot;status&quot;: &quot;ON_STANDARD&quot;,&#xd;
		&quot;thermalState&quot;: &quot;OK&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;actionItemCount&quot;:${actionItemCount},&#xd;
      &quot;temperatureProfile&quot;: &quot;${temperatureProfile}&quot;&#xd;
    }]&#xd;
}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/svc/service/temperaturelog/${logId}/savecomplete?_d=${dags}&amp;_l=${lang}&amp;_u=${userId}</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">Java</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v1" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en,en;q=0.1</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Host" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/vnd.fw-v1+json; charset=utf-8</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="406.6. Save Templerature Log Entry &apos;savecomplete&apos; v2" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: ${logId}, &#xd;
  &quot;status&quot;: &quot;INPROGRESS&quot;, &#xd;
  &quot;completedDateTime&quot;: null,&#xd;
  &quot;completedUserId&quot;: null,&#xd;
  &quot;routineTask&quot;: ${taskId},&#xd;
  &quot;entries&quot;: [&#xd;
    {&#xd;
      &quot;@class&quot;: &quot;frameworks.log.data.RSHoldingTemperatureLogEntry&quot;,&#xd;
      &quot;id&quot;: ${logEntryIdSaveComplete},&#xd;
      &quot;readings&quot;: [&#xd;
        {&#xd;
          &quot;readingIdx&quot;: 0,&#xd;
          &quot;usrTemperatureScale&quot;: &quot;CENTIGRADE&quot;,&#xd;
          &quot;usrTemperature&quot;: &quot;66.0&quot;,&#xd;
          &quot;status&quot;: &quot;ON_STANDARD&quot;,&#xd;
		&quot;thermalState&quot;: &quot;OK&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;actionItemCount&quot;:${actionItemCount},&#xd;
      &quot;temperatureProfile&quot;: &quot;${temperatureProfile}&quot;&#xd;
    }]&#xd;
}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/svc/service/temperaturelog/${logId}/savecomplete?_d=${dags}&amp;_l=${lang}&amp;_u=${userId}</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">Java</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager v2" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en,en;q=0.1</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Host" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${serverName}</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/vnd.fw-v2+json; charset=utf-8</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
